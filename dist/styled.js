'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _merge2 = require('lodash/merge');

var _merge3 = _interopRequireDefault(_merge2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _styletronUtils = require('styletron-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var unnamedCounter = 0;

var Styled = (_temp = _class = function (_Component) {
  _inherits(Styled, _Component);

  // we pull context from above
  function Styled(props, context) {
    _classCallCheck(this, Styled);

    var _this = _possibleConstructorReturn(this, (Styled.__proto__ || Object.getPrototypeOf(Styled)).call(this, props, context));

    if (!context.themeProvider) {
      // TODO: throw or console.error
    }

    _this.componentName = props.name;

    // ensure that the component's default styles are inserted into the master theme.
    // unnamed components are not installed into the theme
    //
    if (_this.componentName) context.themeProvider.installComponent(props.name, props.staticStyle);else _this.componentName = 'Unnamd_' + unnamedCounter++; // guaranteed to not be a legit component name in the theme
    return _this;
  }

  // this is where the magic happens. here we figure out what styles need to be applied
  // to this instance of the component. returns an object of styletron attributes (not classes)
  //


  /*
   every styled component can take two props which allow you to override
   the styles generated by the component directly:
    * className => if the user of a component passes a className prop explicitly,
   it is prepended to the list of styletron classes. use this to link to
   hard-coded classes in an external CSS file (e.g., "margined" or "select-multi")
    * style => the user can pass in a styletron object to override specific styles.
   this overloads React's "style" prop. it integrates with the styletron system,
   so the result of passing a style prop will actually be additional classes,
   not an inline style attribute
   */


  _createClass(Styled, [{
    key: 'getStyle',
    value: function getStyle() {
      var // the theme is stored on context. this is our default theme, plus the user's overrides
      masterTheme = this.context.themeProvider.theme,


      // the theme for this component only. the fallback was used when we didn't require
      // a ThemeProvider as an ancestor, and should not be needed any more
      componentTheme = masterTheme[this.componentName] || this.props.staticStyle,


      // if the user doesn't give us a dynamic styling function, use the default styles
      styleObj = componentTheme;

      // use the component's dynamic styling function to adjust the styles for this instance
      // based on props
      //
      if (typeof this.props.dynamicStyle === 'function') {
        styleObj = this.props.dynamicStyle({

          // the base theme for this component
          componentTheme: componentTheme,

          // the global meta (for colors and other global attributes)
          globalMeta: masterTheme.meta,

          // last, but not least, the props
          props: this.props
        });
      }

      // all components accept a "style" prop for custom styletron attributes.
      // this overrides React's use of "style", as described above.
      //
      styleObj = (0, _merge3.default)({}, styleObj, this.props.style);

      // lastly, middleware
      return this.context.themeProvider.applyMiddleware(styleObj);
    }
  }, {
    key: 'render',
    value: function render() {
      var styleProperties = this.getStyle(),
          _props = this.props,
          className = _props.className,
          children = _props.children,
          otherProps = _objectWithoutProperties(_props, ['className', 'children']),
          name = otherProps.name,
          staticStyle = otherProps.staticStyle,
          dynamicStyle = otherProps.dynamicStyle,
          style = otherProps.style,
          passThroughProps = _objectWithoutProperties(otherProps, ['name', 'staticStyle', 'dynamicStyle', 'style']),
          _context = this.context,
          styletron = _context.styletron,
          theme = _context.themeProvider.theme,
          styletronClasses = (0, _styletronUtils.injectStylePrefixed)(styletron, styleProperties);


      return children({

        // see above for comments on the use of the className prop for legacy CSS classes
        className: (className ? className + ' ' : '') + styletronClasses,

        // the base theme of your component
        componentTheme: theme[this.componentName],

        // the global meta (for colors, etc)
        globalMeta: theme.meta,

        passThrough: passThroughProps
      });
    }
  }]);

  return Styled;
}(_react.Component), _class.contextTypes = {

  // from StyletronProvider (see styletron-react)
  styletron: _react.PropTypes.object.isRequired,

  // from ThemeProvider
  themeProvider: _react.PropTypes.shape({
    theme: _react.PropTypes.object.isRequired,
    installComponent: _react.PropTypes.func.isRequired,
    applyMiddleware: _react.PropTypes.func.isRequired
  })
}, _class.propTypes = {
  name: _react.PropTypes.string, // unnamed components are not themeable; useful for one-offs
  staticStyle: _react.PropTypes.object,
  dynamicStyle: _react.PropTypes.func,
  className: _react.PropTypes.string,
  style: _react.PropTypes.object,
  children: _react.PropTypes.func.isRequired
}, _temp);
exports.default = Styled;